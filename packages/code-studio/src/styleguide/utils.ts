import cl from 'classnames';
import { useCallback, useState } from 'react';

export const HIDE_FROM_E2E_TESTS_CLASS = 'hide-from-e2e-tests';
export const SAMPLE_SECTION_CLASS = 'sample-section';

/**
 * Pseudo random number generator with seed so we get reproducible output.
 * This is necessary in order for e2e tests to work.
 */
export function* pseudoRandomWithSeed(
  seed = 1
): Generator<number, void, never> {
  while (true) {
    // eslint-disable-next-line no-param-reassign
    seed = (seed * 16807) % 2147483647;
    yield seed / 2147483647;
  }
}

/**
 * Returns a callback that will generate pseudo random numbers based on the
 * given seed.
 * @param seed
 */
export function useSeededRandomNumberCallback(seed = 1): () => number {
  const [randomGenerator] = useState(() => pseudoRandomWithSeed(seed));

  return useCallback(() => {
    const result = randomGenerator.next();

    if (result.done === true) {
      throw new Error('Random number generator unexpectedly finished');
    }

    return result.value;
  }, [randomGenerator]);
}

/**
 * Return id and className props for a sample section. Class
 * names generated by this util are used by e2e tests to take snapshots of
 * styleguide sections.
 * @param name Name of the section
 * @param classNames Optional list of class names to include
 */
export function sampleSectionIdAndClasses(
  name: string,
  classNames: string[] = []
): { id: string; className: string } {
  const id = `${SAMPLE_SECTION_CLASS}-${name
    .toLocaleLowerCase()
    .replaceAll(' ', '-')}`;

  const className = cl(SAMPLE_SECTION_CLASS, ...classNames);

  return {
    id,
    className,
  };
}

/**
 * Return id and UNSAFE_className props for a sample section. Class
 * names generated by this util are used by e2e tests to take snapshots of
 * styleguide sections.
 * @param name Name of the section
 * @param classNames Optional list of class names to include
 */
export function sampleSectionIdAndClassesSpectrum(
  name: string,
  classNames: string[] = []
): { id: string; UNSAFE_className: string } {
  const { id, className } = sampleSectionIdAndClasses(name, classNames);

  return {
    id,
    UNSAFE_className: className,
  };
}
