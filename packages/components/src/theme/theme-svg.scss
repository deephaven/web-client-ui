/* stylelint-disable custom-property-empty-line-before */

/** 
 * Create a SVG data url from given viewBox and path. Fill is explicitly set so 
 * that it can be easily replaced via ThemeUtils.calculateInlineSVGOverrides()
 */
@function inline-svg-url($viewBox, $path) {
  @return url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='#{$viewBox}'%3E%3Cpath fill='currentColor' d='#{$path}'/%3E%3C/svg%3E");
}

/* Golden layout */
$svg-path-close-tab: '0 0 320 512',
  'M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z';
$svg-path-maximise: '0 0 16 16', 'M3 3v10h10V3H3zm9 9H4V4h8v8z';
$svg-path-minimise: '0 0 16 16', 'M14 8v1H3V8h11z';
$svg-path-next: '0 0 16 16',
  'M10.072 8.024L5.715 3.667l.618-.62L11 7.716v.618L6.333 13l-.618-.619 4.357-4.357z';
$svg-path-prev: '0 0 16 16',
  'M5.928 7.976l4.357 4.357-.618.62L5 8.284v-.618L9.667 3l.618.619-4.357 4.357z';
$svg-path-tab-dropdown: '0 0 16 16',
  'M7.976 10.072l4.357-4.357.62.618L8.284 11h-.618L3 6.333l.619-.618 4.357 4.357z';
$svg-path-close: '0 0 512 512',
  'm256 278.624 116.672 116.704 22.656 -22.624L278.624 256l116.704 -116.672 -22.624 -22.656L256 233.376 139.328 116.672l-22.624 22.656L233.376 256l-116.672 116.672 22.624 22.656L256 278.624z';

$svg-path-search-cancel: '0 0 16 16',
  'M8 8.707l3.646 3.647.708-.707L8.707 8l3.647-3.646-.707-.708L8 7.293 4.354 3.646l-.707.708L7.293 8l-3.646 3.646.707.708L8 8.707z';
$svg-path-down-caret: '0 0 10 6',
  'M9.99 1.01A1 1 0 0 0 8.283.303L5 3.586 1.717.303A1 1 0 1 0 .303 1.717l3.99 3.98a1 1 0 0 0 1.414 0l3.99-3.98a.997.997 0 0 0 .293-.707z';

$svg-path-error: '0 0 16 16',
  'M7.56 1h.88l6.54 12.26-.44.74H1.44L1 13.26 7.56 1zM8 2.28 2.28 13H13.7L8 2.28zM8.625 12v-1h-1.25v1h1.25zm-1.25-2V6h1.25v4h-1.25z';

/**
 * CSS variables containing inline SVGs. These all should have an explicit 
 * `fill='...'` attribute set so that they can be easily replaced via 
 * ThemeUtils.calculateInlineSVGOverrides()
 */
:root {
  /* Golden layout */
  --dh-svg-icon-close-tab: #{inline-svg-url($svg-path-close-tab...)};
  --dh-svg-icon-maximise: #{inline-svg-url($svg-path-maximise...)};
  --dh-svg-icon-minimise: #{inline-svg-url($svg-path-minimise...)};
  --dh-svg-icon-next: #{inline-svg-url($svg-path-next...)};
  --dh-svg-icon-prev: #{inline-svg-url($svg-path-prev...)};
  --dh-svg-icon-tab-dropdown: #{inline-svg-url($svg-path-tab-dropdown...)};
  --dh-svg-icon-close: #{inline-svg-url($svg-path-close...)};

  --dh-svg-icon-search-cancel: #{inline-svg-url($svg-path-search-cancel...)};
  --dh-svg-icon-selector-caret: #{inline-svg-url($svg-path-down-caret...)};

  /* Bootstrap form input error icon */
  --dh-svg-icon-error: #{inline-svg-url($svg-path-error...)};

  /* 
   * Bootstrap select indicators can't use image masks, so we need an icon for
   * for each state so that ThemeUtils.calculateInlineSVGOverrides() can set
   * the icon color for each state.
   */
  --dh-svg-icon-select-indicator: var(--dh-svg-icon-selector-caret);
  --dh-svg-icon-select-indicator-hover: var(--dh-svg-icon-selector-caret);
  --dh-svg-icon-select-indicator-disabled: var(--dh-svg-icon-selector-caret);
}
