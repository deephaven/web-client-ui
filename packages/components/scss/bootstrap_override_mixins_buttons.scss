// Bootstrap mixin overrides for `bootstrap/scss/mixins/_buttons.scss`

// This mixin overrides the one in `bootstrap/scss/mixins/_buttons.scss`
@mixin button-variant($semantic-value, $_) {
  // DH Customization: Convert semantic value to css variables
  $background: var(--dh-color-#{$semantic-value}-default-bg);
  $border: var(--dh-color-#{$semantic-value}-default-bg);
  $hover-background: var(--dh-color-#{$semantic-value}-hover-bg);
  $hover-border: var(--dh-color-#{$semantic-value}-hover-bg);
  $active-background: var(--dh-color-#{$semantic-value}-down-bg);
  $active-border: var(--dh-color-#{$semantic-value}-down-bg);
  $color: var(--dh-color-white);

  color: $color;
  font-weight: var(--spectrum-global-font-weight-bold);
  @include gradient-bg($background);

  border-color: $border;
  @include box-shadow($btn-box-shadow);

  @include hover {
    color: $color;
    @include gradient-bg($hover-background);

    border-color: $hover-border;
  }

  &:focus {
    box-shadow: none;
  }

  &:focus-visible,
  &.focus {
    color: $color;
    @include gradient-bg($hover-background);

    border-color: $hover-border;
    box-shadow: 0 0 0 $btn-focus-width var(--spectrum-alias-focus-color);
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: $color;
    background-color: $background;
    border-color: $border;
    // Remove CSS gradients if they're enabled
    @if $enable-gradients {
      background-image: none;
    }
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: $color;
    background-color: $active-background;
    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }

    border-color: $active-border;

    &:focus-visible {
      box-shadow: 0 0 0 $btn-focus-width $active-border;
    }
  }
}

@mixin button-outline-variant(
  $color,
  $color-hover: color-yiq($color),
  $active-background: $color,
  $active-border: $color
) {
  color: $color;
  border-color: $color;

  @include hover {
    color: $color-hover;
    background-color: $active-background;
    border-color: $active-border;
  }

  &:focus,
  &.focus {
    box-shadow: 0 0 0 $btn-focus-width rgba($color, 0.5);
  }

  &.disabled,
  &:disabled {
    color: $color;
    background-color: transparent;
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    color: color-yiq($active-background);
    background-color: $active-background;
    border-color: $active-border;

    &:focus {
      @if $enable-shadows and $btn-active-box-shadow != none {
        @include box-shadow(
          $btn-active-box-shadow,
          0 0 0 $btn-focus-width rgba($color, 0.5)
        );
      } @else {
        // Avoid using mixin so we can pass custom focus shadow properly
        box-shadow: 0 0 0 $btn-focus-width rgba($color, 0.5);
      }
    }
  }
}
