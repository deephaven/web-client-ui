# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
env:
  DOCKER_TAG: 0.19.1
jobs:
  build:
    runs-on: ubuntu-22.04
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Check server:${{ env.DOCKER_TAG }} manifest SHA
        # Just take a SHA of the manifest to see if we need to pull the image or can just load from cache
        run: |
          docker manifest inspect ghcr.io/deephaven/server:${{ env.DOCKER_TAG }} | sha256sum | head -c 64 > manifest_sha.txt
          echo "manifest_sha=$(cat manifest_sha.txt)" >> $GITHUB_ENV
      - name: Cache core image
        id: core-cache
        uses: actions/cache@v3
        with:
          path: /var/lib/docker
          key: ${{ runner.os }}-${{ env.manifest_sha }}
      - name: Pull core image
        if: steps.core-cache.outputs.cache-hit != 'true'
        run: docker pull --quiet ghcr.io/deephaven/server:${{ env.DOCKER_TAG }}
      - name: Run core server:${{ env.DOCKER_TAG }}
        run: docker run --detach --publish 10000:10000 ghcr.io/deephaven/server:${{ env.DOCKER_TAG }}
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0' # This action defaults to only getting the latest commit. Setting to 0 makes it retrieve the full git commit history

      - name: Fetch base branch (PR)
        if: ${{ github.event_name == 'pull_request' }}
        run: git fetch --no-tags origin ${{ github.event.pull_request.base.ref }}

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: 'npm'

      - name: Cache jest
        uses: actions/cache@v3
        with:
          path: |
            .jest-cache
            packages/*/.jest-cache
          key: ${{ runner.os }}-jestcache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-jestcache-

      - name: Cache linters
        uses: actions/cache@v3
        with:
          path: |
            .eslintcache
            packages/*/.eslintcache
            .stylelintcache
            packages/*/.stylelintcache
          key: ${{ runner.os }}-lintcache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-lintcache-

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: node-modules-${{ hashFiles('package-lock.json', 'packages/*/package-lock.json')}}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --no-audit

      - name: Build
        run: VITE_CORE_API_URL=http://localhost:10000/jsapi npm run build
      # Run unit tests on all files for accurate code coverage
      # Lint only changed files so linting is faster
      # Caching with the absolute path b/c Jest will make a folder in each project
      # Then there's caches in all package folders
      - name: Unit Test (Pull Request)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          npm run test:unit -- --cacheDirectory $PWD/.jest-cache
          npm run test:lint -- --changedSince origin/${{ github.event.pull_request.base.ref }} --cacheDirectory $PWD/.jest-cache
          npm run test:golden-layout

      - name: Unit Test (Push)
        if: ${{ github.event_name == 'push' }}
        run: |
          npm run test:unit -- --cacheDirectory $PWD/.jest-cache
          npm run test:lint -- --lastCommit --cacheDirectory $PWD/.jest-cache
          npm run test:golden-layout

      - name: Codecov report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          flags: unit

      - name: Install Playwright dependencies
        run: PLAYWRIGHT_BROWSERS_PATH=0 npx playwright install --with-deps
      - name: Run Playwright tests
        run: PLAYWRIGHT_BROWSERS_PATH=0 npx playwright test
      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 14
